brkIndex<-which((distMatrix==distMin)==1,arr.ind=TRUE)
#Dropping duplicates and sorting by row
brkIndexUnique<-brkIndex[!duplicated(brkIndex[, "row"]), ]
brkIndexUnique<-brkIndexUnique[order(brkIndexUnique[, "row"]),]
#Adding information to shapefile
slvShp_segm_info$dist_brk50<-distMin
slvShp_segm_info$brkfe50<-brkIndexUnique[, 'col']
#Calculating the distance of each census segment to disputed border breaks
distBrk<-st_distance(slvShp_segm_info, pnt_disputaBrk_25, by_element = FALSE)
#Converting from units object to numeric array
distMatrix<-distBrk %>% as.data.frame() %>%
data.matrix()
#Calculating the min for each row
distMin<-rowMins(distMatrix)
#Extracting the column indexes as the breaks FE
brkIndex<-which((distMatrix==distMin)==1,arr.ind=TRUE)
#Dropping duplicates and sorting by row
brkIndexUnique<-brkIndex[!duplicated(brkIndex[, "row"]), ]
brkIndexUnique<-brkIndexUnique[order(brkIndexUnique[, "row"]),]
#Adding information to shapefile
slvShp_segm_info$dist_brk25<-distMin
slvShp_segm_info$brkfe25<-brkIndexUnique[, 'col']
#Calculating the distance of each census segment to disputed border breaks
distBrk<-st_distance(slvShp_segm_info, pnt_disputaBrk_10, by_element = FALSE)
#Converting from units object to numeric array
distMatrix<-distBrk %>% as.data.frame() %>%
data.matrix()
#Calculating the min for each row
distMin<-rowMins(distMatrix)
#Extracting the column indexes as the breaks FE
brkIndex<-which((distMatrix==distMin)==1,arr.ind=TRUE)
#Dropping duplicates and sorting by row
brkIndexUnique<-brkIndex[!duplicated(brkIndex[, "row"]), ]
brkIndexUnique<-brkIndexUnique[order(brkIndexUnique[, "row"]),]
#Adding information to shapefile
slvShp_segm_info$dist_brk10<-distMin
slvShp_segm_info$brkfe10<-brkIndexUnique[, 'col']
#---------------------------------------------------------------------------------------
## EXPORTING THE SHAPEFILE WITH ALL INFORMATION:
#
#---------------------------------------------------------------------------------------
# Converting from sf to sp object
slvShp_segm_info_sp_v2 <- as(slvShp_segm_info, Class='Spatial')
#Exporting the shapefile
writeOGR(obj=slvShp_segm_info_sp_v2, dsn="C:/Users/jmjimenez/Dropbox/My-Research/Guerillas_Development/2-Data/Salvador/gis/nl_segm_lvl_vars", layer="slvShp_segm_info_sp", driver="ESRI Shapefile",  overwrite_layer=TRUE)
slvShp_segm_centroid <-st_centroid(slvShp_segm)
pnt_segm_centroid <- st_cast(slvShp_segm_centroid, "POINT")
View(pnt_segm_centroid)
slvShp_segm_centroid <-st_centroid(slvShp_segm)
segm_coords <- do.call(rbind, st_geometry(slvShp_segm_centroid)) %>%
as_tibble() %>% setNames(c("lon","lat"))
View(pnt_segm_centroid)
View(segm_coords)
slvShp_segm_info$x_coord<-segm_centroid_coords[,1]
slvShp_segm_info$y_coord<-segm_centroid_coords[,2]
#Calculating centroid of segments
slvShp_segm_centroid <-st_centroid(slvShp_segm)
segm_centroid_coords <- do.call(rbind, st_geometry(slvShp_segm_centroid)) %>%
as_tibble() %>% setNames(c("lon","lat"))
#Adding segment centroid coordinates to the shape
slvShp_segm_info$x_coord<-segm_centroid_coords[,1]
slvShp_segm_info$y_coord<-segm_centroid_coords[,2]
# Converting from sf to sp object
slvShp_segm_info_sp_v2 <- as(slvShp_segm_info, Class='Spatial')
#Exporting the shapefile
writeOGR(obj=slvShp_segm_info_sp_v2, dsn="C:/Users/jmjimenez/Dropbox/My-Research/Guerillas_Development/2-Data/Salvador/gis/nl_segm_lvl_vars", layer="slvShp_segm_info_sp", driver="ESRI Shapefile",  overwrite_layer=TRUE)
segm_centroid_coords <- segm_centroid_coords %>% as.data.frame() %>%
data.matrix()
slvShp_segm_info <- subset(slvShp_segm_info, select = -x_coord)
slvShp_segm_info <- subset(slvShp_segm_info, select = -y_coord)
#Adding segment centroid coordinates to the shape
slvShp_segm_info$x_coord<-segm_centroid_coords[,1]
slvShp_segm_info$y_coord<-segm_centroid_coords[,2]
# Converting from sf to sp object
slvShp_segm_info_sp_v2 <- as(slvShp_segm_info, Class='Spatial')
#Exporting the shapefile
writeOGR(obj=slvShp_segm_info_sp_v2, dsn="C:/Users/jmjimenez/Dropbox/My-Research/Guerillas_Development/2-Data/Salvador/gis/nl_segm_lvl_vars", layer="slvShp_segm_info_sp", driver="ESRI Shapefile",  overwrite_layer=TRUE)
slvShp_segm_info <- subset(slvShp_segm_info, select = -x_coord)
slvShp_segm_info <- subset(slvShp_segm_info, select = -y_coord)
#Adding segment centroid coordinates to the shape
slvShp_segm_info$xxx<-segm_centroid_coords[,1]
slvShp_segm_info$yyy<-segm_centroid_coords[,2]
# Converting from sf to sp object
slvShp_segm_info_sp_v2 <- as(slvShp_segm_info, Class='Spatial')
#Exporting the shapefile
writeOGR(obj=slvShp_segm_info_sp_v2, dsn="C:/Users/jmjimenez/Dropbox/My-Research/Guerillas_Development/2-Data/Salvador/gis/nl_segm_lvl_vars", layer="slvShp_segm_info_sp", driver="ESRI Shapefile",  overwrite_layer=TRUE)
slvShp_segm_info <- subset(slvShp_segm_info, select = -yyy)
slvShp_segm_info <- subset(slvShp_segm_info, select = -xxx)
save.image("C:/Users/jmjimenez/Dropbox/My-Research/Guerillas_Development/2-Data/Salvador/temp/segm_info_shp.RData")
load("C:/Users/jmjimenez/Dropbox/My-Research/Guerillas_Development/2-Data/Salvador/temp/pixel_info_shp.RData")
tm_shape(slvShp) +
tm_borders(col='black', lwd = 2, lty = "solid", alpha = NA)+
tm_shape(pnt_disputaBrk_200) +
tm_symbols(col = "pink", scale = .5)
#install.packages('raster')
library(data.table)
library(rgdal)
library(rgeos)
library(ggplot2)
library(ggrepel)
library(sf)
library(sp)
library("ggpubr")
library(dplyr)
#library(tidyr)
library(scales)
library(tidyverse)
library(lubridate)
library(gtools)
library(foreign)
library(ggmap)
library(maps)
library(gganimate)
library(gifski)
library(transformr)
library(tmap)
library(raster)
library(matrixStats)
tm_shape(slvShp) +
tm_borders(col='black', lwd = 2, lty = "solid", alpha = NA)+
tm_shape(pnt_disputaBrk_200) +
tm_symbols(col = "pink", scale = .5)
disputa_line_sample <- st_sample(disputa_line, 100, type="regular")
pnt_disputaBrk_100 <- st_cast(disputa_line_sample, "POINT")
tm_shape(slvShp) +
tm_borders(col='black', lwd = 2, lty = "solid", alpha = NA)+
tm_shape(pnt_disputaBrk_200) +
tm_symbols(col = "pink", scale = .5)
tm_shape(slvShp) +
tm_borders(col='black', lwd = 2, lty = "solid", alpha = NA)+
tm_shape(pnt_disputaBrk_100) +
tm_symbols(col = "pink", scale = .5)
disputa_line_sample <- st_sample(disputa_line, 200, type="regular")
pnt_disputaBrk_200 <- st_cast(disputa_line_sample, "POINT")
tm_shape(slvShp) +
tm_borders(col='black', lwd = 2, lty = "solid", alpha = NA)+
tm_shape(pnt_disputaBrk_200) +
tm_symbols(col = "pink", scale = .5)
tmap_save(filename="C:/Users/jmjimenez/Dropbox/My-Research/Guerillas_Development/4-Results/Salvador/plots/bean_pixel.pdf")
tm_shape(slvShp) +
tm_borders(col='black', lwd = 1, lty = "solid", alpha = NA)+
tm_shape(pnt_disputaBrk_200) +
tm_symbols(col = "pink", scale = .5)
tmap_save(filename="C:/Users/jmjimenez/Dropbox/My-Research/Guerillas_Development/4-Results/Salvador/plots/disputa_border_break_fe.pdf")
tm_shape(slvShp) +
tm_borders(col='black', lwd = 1, lty = "solid", alpha = NA)+
tm_shape(pnt_disputaBrk_200) +
tm_symbols(col = "pink", scale = .5)+
tm_add_legend(type="symbol", col="pink", title="Border break")+
tm_layout(frame = FALSE)
tm_shape(slvShp) +
tm_borders(col='black', lwd = 1, lty = "solid", alpha = NA)+
tm_shape(pnt_disputaBrk_200) +
tm_symbols(col = "pink", scale = .5)+
tm_add_legend(type="symbol", col="pink", title="Border break")+
tm_layout(frame = FALSE)
tmap_save(filename="C:/Users/jmjimenez/Dropbox/My-Research/Guerillas_Development/4-Results/Salvador/plots/disputa_border_break_fe.pdf")
tm_shape(slvShp) +
tm_borders(col='black', lwd = 1, lty = "solid", alpha = NA)+
tm_shape(pnt_disputaBrk_200) +
tm_symbols(col = "pink", scale = .5)+
tm_add_legend(type="symbol", col="pink", title="Border break")+
tm_layout(frame = FALSE)
tmap_save(filename="C:/Users/jmjimenez/Dropbox/Apps/Overleaf/GD-draft-slv/plots/disputa_border_break_fe.pdf")
load("C:/Users/jmjimenez/Dropbox/My-Research/Guerillas_Development/2-Data/Salvador/temp/segm_info_shp.RData")
library(data.table)
library(rgdal)
library(rgeos)
library(ggplot2)
library(ggrepel)
library(sf)
library(sp)
library(ggpubr)
library(dplyr)
library(tidyr)
library(scales)
library(tidyverse)
library(lubridate)
library(gtools)
library(foreign)
library(ggmap)
library(maps)
library(gganimate)
library(gifski)
library(transformr)
library(tmap)
library(raster)
library(exactextractr)
library(matrixStats)
#Transforming sp object to sf object
slvShp_segm_info <- st_as_sf(slvShp_segm_info_sp, coords = c('y', 'x'))
slvShp_segm_info$mean_nl2 <- exact_extract(nl13_mask, slvShp_segm_info, 'mean')
slvShp_segm_info$mean_elev2 <- exact_extract(elevation_mask, slvShp_segm_info, 'mean')
slvShp_segm_info$wmean_nl2 <- exact_extract(nl13_mask, slvShp_segm_info, 'weighted_mean', weights=area(nl13_mask))
slvShp_segm_info$wmean_elev2 <- exact_extract(elevation_mask, slvShp_segm_info, 'weighted_mean', weights=area(elevation_mask))
#---------------------------------------------------------------------------------------
## COUNTING OBJECTS OF INTEREST WITHIN SEGMENTS:
#
#---------------------------------------------------------------------------------------
#Counting number of hospitals per segment
intersection <- st_intersection(x = slvShp_segm_info, y = hospitales_sf)
int_result <- intersection %>%
group_by(SEG_ID) %>%
summarise(n=n())
slvShp_segm_info<-st_join(slvShp_segm_info,int_result)
slvShp_segm_info <- subset(slvShp_segm_info, select = -SEG_ID.y)
names(slvShp_segm_info)[names(slvShp_segm_info) == 'SEG_ID.x'] <- 'SEG_ID'
names(slvShp_segm_info)[names(slvShp_segm_info) == 'n'] <- 'n_hosp'
#Counting number of schools per segment
intersection <- st_intersection(x = slvShp_segm_info, y = schools_sf)
int_result <- intersection %>%
group_by(SEG_ID) %>%
summarise(n=n(), matricula=sum(matricula))
slvShp_segm_info<-st_join(slvShp_segm_info,int_result)
slvShp_segm_info <- subset(slvShp_segm_info, select = -SEG_ID.y)
names(slvShp_segm_info)[names(slvShp_segm_info) == 'SEG_ID.x'] <- 'SEG_ID'
names(slvShp_segm_info)[names(slvShp_segm_info) == 'n'] <- 'n_sch'
#---------------------------------------------------------------------------------------
## INCLUDING THE LINE BREAK FE:
#
#---------------------------------------------------------------------------------------
#Sampling points int he borders for the RDD
set.seed(1234)
disputa_line_sample <- st_sample(disputa_line, 1000, type="regular")
pnt_disputaBrk_1000 <- st_cast(disputa_line_sample, "POINT")
disputa_line_sample <- st_sample(disputa_line, 400, type="regular")
pnt_disputaBrk_400 <- st_cast(disputa_line_sample, "POINT")
disputa_line_sample <- st_sample(disputa_line, 200, type="regular")
pnt_disputaBrk_200 <- st_cast(disputa_line_sample, "POINT")
disputa_line_sample <- st_sample(disputa_line, 100, type="regular")
pnt_disputaBrk_100 <- st_cast(disputa_line_sample, "POINT")
disputa_line_sample <- st_sample(disputa_line, 50, type="regular")
pnt_disputaBrk_50 <- st_cast(disputa_line_sample, "POINT")
disputa_line_sample <- st_sample(disputa_line, 25, type="regular")
pnt_disputaBrk_25 <- st_cast(disputa_line_sample, "POINT")
disputa_line_sample <- st_sample(disputa_line, 10, type="regular")
pnt_disputaBrk_10 <- st_cast(disputa_line_sample, "POINT")
control_line_sample <- st_sample(control_line, 200, type="regular")
pnt_controlBrk_200 <- st_cast(control_line_sample, "POINT")
control_line_sample <- st_sample(control_line, 100, type="regular")
pnt_controlBrk_100 <- st_cast(control_line_sample, "POINT")
control_line_sample <- st_sample(control_line, 50, type="regular")
pnt_controlBrk_50 <- st_cast(control_line_sample, "POINT")
#Calculating the distance of each census segment to disputed border breaks
distBrk<-st_distance(slvShp_segm_info, pnt_disputaBrk_1000, by_element = FALSE)
#Converting from units object to numeric array
distMatrix<-distBrk %>% as.data.frame() %>%
data.matrix()
#Calculating the min for each row
distMin<-rowMins(distMatrix)
#Extracting the column indexes as the breaks FE
brkIndex<-which((distMatrix==distMin)==1,arr.ind=TRUE)
#Dropping duplicates and sorting by row
brkIndexUnique<-brkIndex[!duplicated(brkIndex[, "row"]), ]
brkIndexUnique<-brkIndexUnique[order(brkIndexUnique[, "row"]),]
#Adding information to shapefile
slvShp_segm_info$dist_brk1000<-distMin
slvShp_segm_info$brkfe1000<-brkIndexUnique[, 'col']
#Calculating the distance of each census segment to disputed border breaks
distBrk<-st_distance(slvShp_segm_info, pnt_disputaBrk_400, by_element = FALSE)
#Converting from units object to numeric array
distMatrix<-distBrk %>% as.data.frame() %>%
data.matrix()
#Calculating the min for each row
distMin<-rowMins(distMatrix)
#Extracting the column indexes as the breaks FE
brkIndex<-which((distMatrix==distMin)==1,arr.ind=TRUE)
#Dropping duplicates and sorting by row
brkIndexUnique<-brkIndex[!duplicated(brkIndex[, "row"]), ]
brkIndexUnique<-brkIndexUnique[order(brkIndexUnique[, "row"]),]
#Adding information to shapefile
slvShp_segm_info$dist_brk400<-distMin
slvShp_segm_info$brkfe400<-brkIndexUnique[, 'col']
#Calculating the distance of each census segment to disputed border breaks
distBrk<-st_distance(slvShp_segm_info, pnt_disputaBrk_200, by_element = FALSE)
#Converting from units object to numeric array
distMatrix<-distBrk %>% as.data.frame() %>%
data.matrix()
#Calculating the min for each row
distMin<-rowMins(distMatrix)
#Extracting the column indexes as the breaks FE
brkIndex<-which((distMatrix==distMin)==1,arr.ind=TRUE)
#Dropping duplicates and sorting by row
brkIndexUnique<-brkIndex[!duplicated(brkIndex[, "row"]), ]
brkIndexUnique<-brkIndexUnique[order(brkIndexUnique[, "row"]),]
#Adding information to shapefile
slvShp_segm_info$dist_brk200<-distMin
slvShp_segm_info$brkfe200<-brkIndexUnique[, 'col']
#Calculating the distance of each census segment to disputed border breaks
distBrk<-st_distance(slvShp_segm_info, pnt_disputaBrk_100, by_element = FALSE)
#Converting from units object to numeric array
distMatrix<-distBrk %>% as.data.frame() %>%
data.matrix()
#Calculating the min for each row
distMin<-rowMins(distMatrix)
#Extracting the column indexes as the breaks FE
brkIndex<-which((distMatrix==distMin)==1,arr.ind=TRUE)
#Dropping duplicates and sorting by row
brkIndexUnique<-brkIndex[!duplicated(brkIndex[, "row"]), ]
brkIndexUnique<-brkIndexUnique[order(brkIndexUnique[, "row"]),]
#Adding information to shapefile
slvShp_segm_info$dist_brk100<-distMin
slvShp_segm_info$brkfe100<-brkIndexUnique[, 'col']
#Calculating the distance of each census segment to disputed border breaks
distBrk<-st_distance(slvShp_segm_info, pnt_disputaBrk_50, by_element = FALSE)
#Converting from units object to numeric array
distMatrix<-distBrk %>% as.data.frame() %>%
data.matrix()
#Calculating the min for each row
distMin<-rowMins(distMatrix)
#Extracting the column indexes as the breaks FE
brkIndex<-which((distMatrix==distMin)==1,arr.ind=TRUE)
#Dropping duplicates and sorting by row
brkIndexUnique<-brkIndex[!duplicated(brkIndex[, "row"]), ]
brkIndexUnique<-brkIndexUnique[order(brkIndexUnique[, "row"]),]
#Adding information to shapefile
slvShp_segm_info$dist_brk50<-distMin
slvShp_segm_info$brkfe50<-brkIndexUnique[, 'col']
#Calculating the distance of each census segment to disputed border breaks
distBrk<-st_distance(slvShp_segm_info, pnt_disputaBrk_25, by_element = FALSE)
#Converting from units object to numeric array
distMatrix<-distBrk %>% as.data.frame() %>%
data.matrix()
#Calculating the min for each row
distMin<-rowMins(distMatrix)
#Extracting the column indexes as the breaks FE
brkIndex<-which((distMatrix==distMin)==1,arr.ind=TRUE)
#Dropping duplicates and sorting by row
brkIndexUnique<-brkIndex[!duplicated(brkIndex[, "row"]), ]
brkIndexUnique<-brkIndexUnique[order(brkIndexUnique[, "row"]),]
#Adding information to shapefile
slvShp_segm_info$dist_brk25<-distMin
slvShp_segm_info$brkfe25<-brkIndexUnique[, 'col']
#Calculating the distance of each census segment to disputed border breaks
distBrk<-st_distance(slvShp_segm_info, pnt_disputaBrk_10, by_element = FALSE)
#Converting from units object to numeric array
distMatrix<-distBrk %>% as.data.frame() %>%
data.matrix()
#Calculating the min for each row
distMin<-rowMins(distMatrix)
#Extracting the column indexes as the breaks FE
brkIndex<-which((distMatrix==distMin)==1,arr.ind=TRUE)
#Dropping duplicates and sorting by row
brkIndexUnique<-brkIndex[!duplicated(brkIndex[, "row"]), ]
brkIndexUnique<-brkIndexUnique[order(brkIndexUnique[, "row"]),]
#Adding information to shapefile
slvShp_segm_info$dist_brk10<-distMin
slvShp_segm_info$brkfe10<-brkIndexUnique[, 'col']
#Calculating the distance of each census segment to control border breaks
distBrk<-st_distance(slvShp_segm_info, pnt_controlBrk_200, by_element = FALSE)
#Converting from units object to numeric array
distMatrix<-distBrk %>% as.data.frame() %>%
data.matrix()
#Calculating the min for each row
distMin<-rowMins(distMatrix)
#Extracting the column indexes as the breaks FE
brkIndex<-which((distMatrix==distMin)==1,arr.ind=TRUE)
#Dropping duplicates and sorting by row
brkIndexUnique<-brkIndex[!duplicated(brkIndex[, "row"]), ]
brkIndexUnique<-brkIndexUnique[order(brkIndexUnique[, "row"]),]
#Adding information to shapefile
slvShp_segm_info$cntrldist_brk200<-distMin
slvShp_segm_info$cntrlbrkfe200<-brkIndexUnique[, 'col']
#Calculating the distance of each census segment to disputed border breaks
distBrk<-st_distance(slvShp_segm_info, pnt_controlBrk_100, by_element = FALSE)
#Converting from units object to numeric array
distMatrix<-distBrk %>% as.data.frame() %>%
data.matrix()
#Calculating the min for each row
distMin<-rowMins(distMatrix)
#Extracting the column indexes as the breaks FE
brkIndex<-which((distMatrix==distMin)==1,arr.ind=TRUE)
#Dropping duplicates and sorting by row
brkIndexUnique<-brkIndex[!duplicated(brkIndex[, "row"]), ]
brkIndexUnique<-brkIndexUnique[order(brkIndexUnique[, "row"]),]
#Adding information to shapefile
slvShp_segm_info$cntrldist_brk100<-distMin
slvShp_segm_info$cntrlbrkfe100<-brkIndexUnique[, 'col']
#Calculating the distance of each census segment to disputed border breaks
distBrk<-st_distance(slvShp_segm_info, pnt_controlBrk_50, by_element = FALSE)
#Converting from units object to numeric array
distMatrix<-distBrk %>% as.data.frame() %>%
data.matrix()
#Calculating the min for each row
distMin<-rowMins(distMatrix)
#Extracting the column indexes as the breaks FE
brkIndex<-which((distMatrix==distMin)==1,arr.ind=TRUE)
#Dropping duplicates and sorting by row
brkIndexUnique<-brkIndex[!duplicated(brkIndex[, "row"]), ]
brkIndexUnique<-brkIndexUnique[order(brkIndexUnique[, "row"]),]
#Adding information to shapefile
slvShp_segm_info$cntrldist_brk50<-distMin
slvShp_segm_info$cntrlbrkfe50<-brkIndexUnique[, 'col']
#---------------------------------------------------------------------------------------
## EXPORTING THE SHAPEFILE WITH ALL INFORMATION:
#
#---------------------------------------------------------------------------------------
#Adding segment centroid coordinates to the shape
#slvShp_segm_info$xxx<-segm_centroid_coords[,1]
#slvShp_segm_info$yyy<-segm_centroid_coords[,2]
# Converting from sf to sp object
slvShp_segm_info_sp_v2 <- as(slvShp_segm_info, Class='Spatial')
#Exporting the shapefile
writeOGR(obj=slvShp_segm_info_sp_v2, dsn="C:/Users/jmjimenez/Dropbox/My-Research/Guerillas_Development/2-Data/Salvador/gis/nl_segm_lvl_vars", layer="slvShp_segm_info_sp", driver="ESRI Shapefile",  overwrite_layer=TRUE)
save.image("C:/Users/jmjimenez/Dropbox/My-Research/Guerillas_Development/2-Data/Salvador/temp/segm_info_shp.RData")
load("C:/Users/jmjimenez/Dropbox/My-Research/Guerillas_Development/2-Data/Salvador/temp/pixel_info_shp.RData")
library(data.table)
library(rgdal)
library(rgeos)
library(ggplot2)
library(ggrepel)
library(sf)
library(sp)
library("ggpubr")
library(dplyr)
#library(tidyr)
library(scales)
library(tidyverse)
library(lubridate)
library(gtools)
library(foreign)
library(ggmap)
library(maps)
library(gganimate)
library(gifski)
library(transformr)
library(tmap)
library(raster)
library(matrixStats)
#Exporting map of night light density and FMLN zones
tm_shape(nl13_mask) +
tm_raster(title='Night Light Density (2013)') +
tm_shape(slvShp) +
tm_borders()+
tm_shape(disputaShp) +
tm_borders(col='pink', lwd = 3, lty = "solid", alpha = NA) +
tm_add_legend(type="line", col="pink", lwd=10, title="FMLN-Disputed zone")+
tm_shape(expansionShp) +
tm_borders(col='blue', lwd = 2, lty = "solid", alpha = NA) +
tm_add_legend(type="line", col="blue", lwd=10, title="FMLN-Expansion zone")+
tm_shape(controlShp) +
tm_borders(col='red', lwd = 2, lty = "solid", alpha = NA) +
tm_add_legend(type="line", col="red", lwd=10, title="FMLN-Dominated zone")+
tm_layout(legend.outside = TRUE, legend.outside.position = "left", legend.outside.size=0.15, legend.title.size =1, frame = FALSE)
tmap_save(filename="C:/Users/jmjimenez/Dropbox/My-Research/Guerillas_Development/4-Results/Salvador/plots/night_light_13_salvador.pdf")
#Exporting map of elevation and FMLN zones
tm_shape(elevation_mask) +
tm_raster(title='Elevation', palette="-RdYlGn") +
tm_shape(slvShp) +
tm_borders()+
tm_shape(disputaShp) +
tm_borders(col='pink', lwd = 3, lty = "solid", alpha = NA) +
tm_add_legend(type="line", col="pink", lwd=10, title="FMLN-Disputed Zone")+
tm_shape(expansionShp) +
tm_borders(col='blue', lwd = 2, lty = "solid", alpha = NA) +
tm_add_legend(type="line", col="blue", lwd=10, title="FMLN-Expansion zone")+
tm_shape(controlShp) +
tm_borders(col='red', lwd = 2, lty = "solid", alpha = NA) +
tm_add_legend(type="line", col="red", lwd=10, title="FMLN-Dominated Zone")+
tm_layout(legend.outside = TRUE, legend.outside.position = "left", legend.outside.size=0.15, legend.title.size =1, frame = FALSE)
tmap_save(filename="C:/Users/jmjimenez/Dropbox/Apps/Overleaf/GD-draft-slv/plots/elevation_salvador.pdf")
#Masking Elevation
elevation_crop <- crop(elevation, slvShp_sp)
elevation_mask <- mask(elevation_crop, mask=slvShp_sp)
#Exporting map of elevation and FMLN zones
tm_shape(elevation_mask) +
tm_raster(title='Elevation', palette="-RdYlGn") +
tm_shape(slvShp) +
tm_borders()+
tm_shape(disputaShp) +
tm_borders(col='pink', lwd = 3, lty = "solid", alpha = NA) +
tm_add_legend(type="line", col="pink", lwd=10, title="FMLN-Disputed Zone")+
tm_shape(expansionShp) +
tm_borders(col='blue', lwd = 2, lty = "solid", alpha = NA) +
tm_add_legend(type="line", col="blue", lwd=10, title="FMLN-Expansion zone")+
tm_shape(controlShp) +
tm_borders(col='red', lwd = 2, lty = "solid", alpha = NA) +
tm_add_legend(type="line", col="red", lwd=10, title="FMLN-Dominated Zone")+
tm_layout(legend.outside = TRUE, legend.outside.position = "left", legend.outside.size=0.15, legend.title.size =1, frame = FALSE)
tmap_save(filename="C:/Users/jmjimenez/Dropbox/Apps/Overleaf/GD-draft-slv/plots/elevation_salvador.pdf")
#Exporting map of night light density and FMLN zones
tm_shape(nl13_mask) +
tm_raster(title='Night Light Density (2013)') +
tm_shape(slvShp) +
tm_borders()+
tm_shape(disputaShp) +
tm_borders(col='pink', lwd = 3, lty = "solid", alpha = NA) +
tm_add_legend(type="line", col="pink", lwd=10, title="FMLN-Disputed zone")+
tm_shape(expansionShp) +
tm_borders(col='blue', lwd = 2, lty = "solid", alpha = NA) +
tm_add_legend(type="line", col="blue", lwd=10, title="FMLN-Expansion zone")+
tm_shape(controlShp) +
tm_borders(col='red', lwd = 2, lty = "solid", alpha = NA) +
tm_add_legend(type="line", col="red", lwd=10, title="FMLN-Dominated zone")+
tm_layout(legend.outside = TRUE, legend.outside.position = "left", legend.outside.size=0.15, legend.title.size =1, frame = FALSE)
tmap_save(filename="C:/Users/jmjimenez/Dropbox/My-Research/Guerillas_Development/4-Results/Salvador/plots/night_light_13_salvador.pdf")
#Exporting map of night light density and FMLN zones
tm_shape(nl13_mask) +
tm_raster(title='Night Light Density (2013)') +
tm_shape(slvShp) +
tm_borders()+
tm_shape(disputaShp) +
tm_borders(col='pink', lwd = 3, lty = "solid", alpha = NA) +
tm_add_legend(type="line", col="pink", lwd=10, title="FMLN-Disputed zone")+
tm_shape(expansionShp) +
tm_borders(col='blue', lwd = 2, lty = "solid", alpha = NA) +
tm_add_legend(type="line", col="blue", lwd=10, title="FMLN-Expansion zone")+
tm_shape(controlShp) +
tm_borders(col='red', lwd = 2, lty = "solid", alpha = NA) +
tm_add_legend(type="line", col="red", lwd=10, title="FMLN-Dominated zone")+
tm_layout(legend.outside = TRUE, legend.outside.position = "left", legend.outside.size=0.15, legend.title.size =1, frame = FALSE)
tmap_save(filename="C:/Users/jmjimenez/Dropbox/Apps/Overleaf/GD-draft-slv/plots/night_light_13_salvador.pdf")
